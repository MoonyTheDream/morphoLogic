"""first real

Revision ID: d25fe8822de1
Revises:
Create Date: 2025-04-05 20:35:43.046415

"""

import geoalchemy2

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d25fe8822de1"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "accounts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("email", sa.String(length=60), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "character_souls",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("account_id", sa.Integer(), nullable=False),
        sa.Column("permission_level", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "game_objects",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "object_type",
            sa.Enum("ITEM", "CHARACTER", name="objecttype"),
            nullable=False,
        ),
        sa.Column(
            "location",
            geoalchemy2.types.Geometry(
                geometry_type="POINTZ",
                srid=3857,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "attributes", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("container_id", sa.Integer(), nullable=True),
        sa.Column("puppeted_by_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["container_id"],
            ["game_objects.id"],
        ),
        # sa.ForeignKeyConstraint(
        #     ["puppeted_by_id"],
        #     ["characters.id"],
        # ),
        sa.PrimaryKeyConstraint("id"),
    )

    # op.create_index(
    #     "idx_game_objects_location",
    #     "game_objects",
    #     ["location"],
    #     unique=False,
    #     postgresql_using="gist",
    # )
    
    op.create_table(
        "characters",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("account_id", sa.Integer(), nullable=False),
        sa.Column("puppeting_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["id"],
            ["game_objects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["puppeting_id"],
            ["game_objects.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    
    # Now that both tables exist, create the missing FK
    op.create_foreign_key(
        'fk_game_objects_puppeted_by_id',
        'game_objects', 'characters',
        ['puppeted_by_id'], ['id']
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        'fk_game_objects_puppeted_by_id',  # the name we gave in upgrade()
        'game_objects',
        type_='foreignkey'
    )
    
    op.drop_table("character_souls")
    # op.drop_index(
    #     "idx_game_objects_location", table_name="game_objects", postgresql_using="gist"
    # )
    op.drop_table("game_objects")
    op.drop_table("characters")
    op.drop_table("accounts")
    # ### end Alembic commands ###
